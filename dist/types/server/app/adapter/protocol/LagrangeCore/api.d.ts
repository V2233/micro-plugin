declare let api: {
    get_msg(id: string | number, message_id: string): Promise<any>;
    delete_msg(id: string | number, message_id: string): Promise<any>;
    get_login_info(id: string | number): Promise<any>;
    set_qq_profile(id: string | number, nickname: string, company: string, email: string, college: string, personal_note: string, age: number, birthday: string): Promise<any>;
    get_stranger_info(id: string | number, user_id: string, no_cache?: boolean): Promise<any>;
    get_friend_list(id: string | number): Promise<any>;
    get_unidirectional_friend_list(id: string | number): Promise<any>;
    get_group_info(id: string | number, group_id: number, refresh?: boolean): Promise<any>;
    get_group_list(id: string | number): Promise<any>;
    get_group_member_info(id: string | number, group_id: number, user_id: number, refresh?: boolean): Promise<any>;
    get_group_member_list(id: string | number, group_id: number): Promise<any>;
    get_group_honor_info(id: string | number, group_id: number): Promise<any>;
    get_group_system_msg(id: string | number): Promise<any>;
    get_essence_msg_list(id: string | number, group_id: number): Promise<any>;
    is_blacklist_uin(id: string | number, user_id: number): Promise<any>;
    delete_friend(id: string | number, user_id: number): Promise<any>;
    delete_unidirectional_friend(id: string | number, user_id: number): Promise<any>;
    set_group_name(id: string | number, group_id: number, group_name: string): Promise<any>;
    set_group_portrait(id: string | number, group_id: number, file: any, cache?: number): Promise<any>;
    set_group_admin(id: string | number, group_id: number, user_id: number, enable: boolean): Promise<any>;
    set_group_card(id: string | number, group_id: number, user_id: number, card: string): Promise<any>;
    set_group_special_title(id: string | number, group_id: number, user_id: number, special_title: string): Promise<any>;
    set_group_ban(id: string | number, group_id: number, user_id: number, duration: any): Promise<any>;
    set_group_whole_ban(id: string | number, group_id: number, enable: boolean): Promise<any>;
    set_essence_msg(id: string | number, message_id: number): Promise<any>;
    delete_essence_msg(id: string | number, message_id: number): Promise<any>;
    send_group_sign(id: string | number, group_id: number): Promise<any>;
    send_group_notice(id: string | number, group_id: number, content: string, image: string): Promise<any>;
    get_group_notice(id: string | number, group_id: number): Promise<any>;
    set_group_kick(id: string | number, group_id: number, user_id: number, reject_add_request: boolean): Promise<any>;
    set_group_leave(id: string | number, group_id: number): Promise<any>;
    group_touch(id: string | number, group_id: number, user_id: number): Promise<any>;
    upload_private_file(id: string | number, user_id: number, file: string, name: string): Promise<any>;
    upload_group_file(id: string | number, group_id: number, file: string, name: string): Promise<any>;
    delete_group_file(id: string | number, group_id: number, file_id: string, busid: number): Promise<any>;
    create_group_file_folder(id: string | number, group_id: number): Promise<any>;
    delete_group_folder(id: string | number, group_id: number, folder_id: string): Promise<any>;
    get_group_file_system_info(id: string | number, group_id: number): Promise<any>;
    get_group_root_files(id: string | number, group_id: number): Promise<any>;
    get_group_files_by_folder(id: string | number, group_id: number, folder_id: string): Promise<any>;
    get_group_file_url(id: string | number, group_id: number, file_id: string, busid: number): Promise<any>;
    send_like(id: string | number, user_id: number, times: number): Promise<any>;
    get_history_msg(id: string | number, message_type: string, user_id: number, group_id: number, count: number, message_id: number): Promise<any>;
    get_group_msg_history(id: string | number, group_id: number, count: number, message_id: number): Promise<any>;
    get_friend_msg_history(id: string | number, user_id: number, count: number, message_id: number): Promise<any>;
    clear_msgs(id: string | number, message_type: string, TargetID: number): Promise<any>;
    get_cookies(id: string | number, domain?: string): Promise<any>;
    get_csrf_token(id: string | number, domain?: string): Promise<any>;
    set_friend_add_request(id: string | number, flag: string, approve: boolean, remark?: string): Promise<any>;
    set_group_add_request(id: string | number, flag: string, sub_type: string, approve: boolean, reason?: string): Promise<any>;
    get_weather_city_code(id: string | number, city: string): Promise<any>;
    upload_file(id: string | number, file: string): Promise<any>;
    download_file(id: string | number, file: string, thread_cnt: number | undefined, headers: string | Array<any> | undefined): Promise<any>;
    get_forward_msg(id: string | number, msg_id: string): Promise<any>;
    send_group_forward_msg(id: string | number, group_id: number, messages: any): Promise<any>;
    send_private_forward_msg(id: string | number, user_id: number, messages: any): Promise<any>;
    get_prohibited_member_list(id: string | number, group_id: number): Promise<any>;
    send_private_msg(uin: string | number, user_id: number, message: any[], raw_message: string, node: any): Promise<any>;
    send_group_msg(uin: string | number, group_id: number, message: any[], raw_message: string, node: any): Promise<any>;
    SendApi(id: string | number, action: string, params: object): Promise<any>;
};
export default api;
